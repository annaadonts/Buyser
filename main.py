import streamlit as st
import tensorflow as tf
import numpy as np


# Add at the top after imports
st.markdown("""
<style>
@import url('https://fonts.googleapis.com/css2?family=Noto+Sans+Armenian:wght@400;700&display=swap');
html, body, [class*="css"] {
    font-family: 'Noto Sans Armenian', sans-serif;
}
</style>
""", unsafe_allow_html=True)

# ==============================
# LANGUAGE CONFIGURATION
# ==============================
LANGUAGES = {
    'en': {
        # App Interface
        'dashboard_title': 'Dashboard',
        'page_select': 'Select Page',
        'pages': ['Home', 'About', 'Disease Recognition'],
        'home_title': 'PLANT DISEASE RECOGNITION SYSTEM',
        'about_title': 'About',
        'prediction_title': 'Disease Recognition',
        'file_uploader': 'Choose an image:',
        'show_image_btn': 'Show Image',
        'predict_btn': 'Predict',
        'prediction_result': "Model prediction: {}",
        'upload_warning': "Please upload an image first",
        
        # Content
        'home_content': """Welcome to the Plant Disease Recognition System! üåøüîç

Our mission is to help identify plant diseases efficiently. Upload a plant image, and our system will analyze it for disease signs. Let's protect our crops together!

### How It Works
1. **Upload Image:** Go to **Disease Recognition** and upload an image
2. **Analysis:** Our AI will process the image
3. **Results:** Get diagnosis and recommendations""",

        'about_content': """#### About Dataset
This dataset contains plant disease images with three main folders:

#### Content
- Train (70,295 images)
- Validation (17,572 images)
- Test (33 images)""",

        # Complete English class names
        'class_names': [
            'Apple - Apple scab',
            'Apple - Black rot',
            'Apple - Cedar apple rust',
            'Apple - Healthy',
            'Blueberry - Healthy',
            'Cherry - Powdery mildew',
            'Cherry - Healthy',
            'Corn - Cercospora leaf spot',
            'Corn - Common rust',
            'Corn - Northern Leaf Blight',
            'Corn - Healthy',
            'Grape - Black rot',
            'Grape - Esca (Black Measles)',
            'Grape - Leaf blight',
            'Grape - Healthy',
            'Orange - Huanglongbing (Citrus greening)',
            'Peach - Bacterial spot',
            'Peach - Healthy',
            'Bell Pepper - Bacterial spot',
            'Bell Pepper - Healthy',
            'Potato - Early blight',
            'Potato - Late blight',
            'Potato - Healthy',
            'Raspberry - Healthy',
            'Soybean - Healthy',
            'Squash - Powdery mildew',
            'Strawberry - Leaf scorch',
            'Strawberry - Healthy',
            'Tomato - Bacterial spot',
            'Tomato - Early blight',
            'Tomato - Late blight',
            'Tomato - Leaf Mold',
            'Tomato - Septoria leaf spot',
            'Tomato - Spider mites',
            'Tomato - Target Spot',
            'Tomato - Yellow Leaf Curl Virus',
            'Tomato - Mosaic virus',
            'Tomato - Healthy'
        ]
    },
    'am': {
        # App Interface
        'dashboard_title': '’é’°’∞’°’∂’°’Ø',
        'page_select': '‘∏’∂’ø÷Ä’•’¨ ‘∑’ª’®',
        'pages': ['‘≥’¨’≠’°’æ’∏÷Ä', '’Ñ’•÷Ä ’Ñ’°’Ω’´’∂', '’Ä’´’æ’°’∂’§’∏÷Ç’©’µ’°’∂ ’à÷Ä’∏’∑’∏÷Ç’¥'],
        'home_title': '‘≤’à’í’ç‘±‘ø‘±’Ü ’Ä‘ª’é‘±’Ü‘¥’à’í‘π’Ö’à’í’Ü’Ü‘µ’ê‘ª ‘∂’Ü’Ü’Ñ‘±’Ü ’Ä‘±’Ñ‘±‘ø‘±’ê‘≥',
        'about_title': '’Ñ’•÷Ä ’Ñ’°’Ω’´’∂',
        'prediction_title': '’Ä’´’æ’°’∂’§’∏÷Ç’©’µ’°’∂ ‘±’≠’ø’∏÷Ä’∏’∑’∏÷Ç’¥',
        'file_uploader': '‘∏’∂’ø÷Ä’•’¨ ’Ü’Ø’°÷Ä’®',
        'show_image_btn': '’ë’∏÷Ç’µ÷Å ’è’°’¨ ’Ü’Ø’°÷Ä’®',
        'predict_btn': '‘±’≠’ø’∏÷Ä’∏’∑’•’¨',
        'prediction_result': "‘±÷Ä’§’µ’∏÷Ç’∂÷Ñ’ù {}",
        'upload_warning': "‘Ω’∂’§÷Ä’∏÷Ç’¥ ’•’∂÷Ñ ’∂’Ø’°÷Ä’® ’æ’•÷Ä’¢’•’º’∂’•’¨",
        
        # Content
        'home_content': """‘≤’°÷Ä’´ ’£’°’¨’∏÷Ç’Ω’ø ‘≤’∏÷Ç’Ω’°’Ø’°’∂ ’∞’´’æ’°’∂’§’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä’´ ’¶’∂’∂’¥’°’∂ ’∞’°’¥’°’Ø’°÷Ä’£! üåøüîç

’Ñ’•÷Ä ’∂’∫’°’ø’°’Ø’∂ ’ß ÷Ö’£’∂’•’¨ ’∂’∏÷Ç’µ’∂’°’Ø’°’∂’°÷Å’∂’•’¨ ’¢’∏÷Ç’µ’Ω’•÷Ä’´ ’∞’´’æ’°’∂’§’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä’®: ’é’•÷Ä’¢’•’º’∂’•÷Ñ ’¢’∏÷Ç’µ’Ω’´ ’∂’Ø’°÷Ä’®, ÷á ’¥’•÷Ä ’∞’°’¥’°’Ø’°÷Ä’£’® ’Ø’æ’•÷Ä’¨’∏÷Ç’Æ’´ ’°’µ’∂: ‘µ’Ø’•÷Ñ ’¥’´’°’Ω’´’∂ ’∫’°’∑’ø’∫’°’∂’•’∂÷Ñ ’¥’•÷Ä ’¢’•÷Ä÷Ñ’®:

### ‘ª’∂’π’∫’•’Ω ‘±’∑’≠’°’ø’•’¨
1. **’Ü’Ø’°÷Ä’´ ’é’•÷Ä’¢’•’º’∂’∏÷Ç’¥:** ‘±’∂÷Å’•÷Ñ ¬´’Ä’´’æ’°’∂’§’∏÷Ç’©’µ’°’∂ ’à÷Ä’∏’∑’∏÷Ç’¥¬ª ’¢’°’™’´’∂’®
2. **’é’•÷Ä’¨’∏÷Ç’Æ’∏÷Ç’©’µ’∏÷Ç’∂:** ’Ä’°’¥’°’Ø’°÷Ä’£’® ’Ø’æ’•÷Ä’¨’∏÷Ç’Æ’´ ’∂’Ø’°÷Ä’®
3. **‘±÷Ä’§’µ’∏÷Ç’∂÷Ñ’∂’•÷Ä:** ’ç’ø’°÷Å’•÷Ñ ’°’≠’ø’∏÷Ä’∏’∑’∏÷Ç’¥ ÷á ’°’º’°’ª’°÷Ä’Ø’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä""",

        'about_content': """#### ’è’æ’µ’°’¨’∂’•÷Ä’´ ’Ä’°’æ’°÷Ñ’°’Æ’∏÷Ç
‘±’µ’Ω ’∞’°’æ’°÷Ñ’°’Æ’∏÷Ç’∂ ’∫’°÷Ä’∏÷Ç’∂’°’Ø’∏÷Ç’¥ ’ß ’¢’∏÷Ç’µ’Ω’•÷Ä’´ ’∞’´’æ’°’∂’§’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä’´ ’∂’Ø’°÷Ä’∂’•÷Ä:

#### ’ä’°÷Ä’∏÷Ç’∂’°’Ø’∏÷Ç’©’µ’∏÷Ç’∂
- ‘¥’°’Ω’°’æ’∏÷Ä’æ’°’Æ (70,295 ’∂’Ø’°÷Ä)
- ’é’°’æ’•÷Ä’°÷Å’∏÷Ç’¥ (17,572 ’∂’Ø’°÷Ä)
- ’ì’∏÷Ä’±’°÷Ä’Ø’∏÷Ç’¥ (33 ’∂’Ø’°÷Ä)""",

        # Armenian class names (COMPLETE TRANSLATIONS)
        'class_names': [
            '‘Ω’∂’±’∏÷Ä - ‘Ω’∂’±’∏÷Ä’´ ’≠’°’º’∂’°÷Ä’°’∂',
            '‘Ω’∂’±’∏÷Ä - ’ç÷á ÷É’ø’∏÷Ç’¥',
            '‘Ω’∂’±’∏÷Ä - ‘ø’•’§÷Ä’∏’∂’´ ’™’°’∂’£',
            '‘Ω’∂’±’∏÷Ä - ‘±’º’∏’≤’ª',
            '‘π’∏÷Ç’∑ - ‘±’º’∏’≤’ª',
            '‘≤’°’¨ - ’É’•÷Ä’¥’°’Ø ÷É’∏’∑’´',
            '‘≤’°’¨ - ‘±’º’∏’≤’ª',
            '‘µ’£’´’∫’ø’°÷Å’∏÷Ä’•’∂ - ’è’•÷Ä÷á’´ ’¢’Æ’•÷Ä',
            '‘µ’£’´’∫’ø’°÷Å’∏÷Ä’•’∂ - ’ç’∏’æ’∏÷Ä’°’Ø’°’∂ ’™’°’∂’£',
            '‘µ’£’´’∫’ø’°÷Å’∏÷Ä’•’∂ - ’Ä’µ’∏÷Ç’Ω’´’Ω’°’µ’´’∂ ’ø’•÷Ä÷á’´ ’°’µ÷Ä’∏÷Ç’¥',
            '‘µ’£’´’∫’ø’°÷Å’∏÷Ä’•’∂ - ‘±’º’∏’≤’ª',
            '’à÷Ç÷Ä÷Å - ’ç÷á ÷É’ø’∏÷Ç’¥',
            '’à÷Ç÷Ä÷Å - ’ç÷á ’Ø’°÷Ä’¥÷Ä’°’≠’ø',
            '’à÷Ç÷Ä÷Å - ’è’•÷Ä÷á’´ ’°’µ÷Ä’∏÷Ç’¥',
            '’à÷Ç÷Ä÷Å - ‘±’º’∏’≤’ª',
            '’Ü’°÷Ä’´’∂’ª - ‘Ω’´’ø÷Ä’∏’Ω’°’µ’´’∂ ’Ø’°’∂’°’π’∏÷Ç’©’µ’∏÷Ç’∂',
            '‘≤’°’¨ - ‘≤’°’Ø’ø’•÷Ä’´’°’¨ ’¢’´’Æ',
            '‘≤’°’¨ - ‘±’º’∏’≤’ª',
            '’é’°÷Ä’∏÷Ç’∂’£ - ‘≤’°’Ø’ø’•÷Ä’´’°’¨ ’¢’´’Æ',
            '’é’°÷Ä’∏÷Ç’∂’£ - ‘±’º’∏’≤’ª',
            '‘ø’°÷Ä’ø’∏÷Ü’´’¨ - ’é’°’≤ ’°’µ÷Ä’∏÷Ç’¥',
            '‘ø’°÷Ä’ø’∏÷Ü’´’¨ - ’à÷Ç’∑ ’°’µ÷Ä’∏÷Ç’¥',
            '‘ø’°÷Ä’ø’∏÷Ü’´’¨ - ‘±’º’∏’≤’ª',
            '‘±’¶’∂’æ’°’¥’∏÷Ä’´ - ‘±’º’∏’≤’ª',
            '’ç’∏’µ’° - ‘±’º’∏’≤’ª',
            '‘¥’§’∏÷Ç’¥ - ’É’•÷Ä’¥’°’Ø ÷É’∏’∑’´',
            '’Ñ’∏÷Ä’´ - ’è’•÷Ä÷á’´ ’°’µ÷Ä’∏÷Ç’¥',
            '’Ñ’∏÷Ä’´ - ‘±’º’∏’≤’ª',
            '’ä’∏’¥’´’§’∏÷Ä - ‘≤’°’Ø’ø’•÷Ä’´’°’¨ ’¢’´’Æ',
            '’ä’∏’¥’´’§’∏÷Ä - ’é’°’≤ ’°’µ÷Ä’∏÷Ç’¥',
            '’ä’∏’¥’´’§’∏÷Ä - ’à÷Ç’∑ ’°’µ÷Ä’∏÷Ç’¥',
            '’ä’∏’¥’´’§’∏÷Ä - ’è’•÷Ä÷á’´ ’¢’∏÷Ä’¢’∏’Ω',
            '’ä’∏’¥’´’§’∏÷Ä - Septoria ’¢’´’Æ',
            '’ä’∏’¥’´’§’∏÷Ä - ’ç’°÷Ä’§’∏’Ω’ø’°’µ’∂ ’ø’´’¶',
            '’ä’∏’¥’´’§’∏÷Ä - ‘π’´÷Ä’°’≠’°’µ’´’∂ ’¢’´’Æ',
            '’ä’∏’¥’´’§’∏÷Ä - ‘¥’•’≤’´’∂ ’ø’•÷Ä÷á’´ ’£’°’∂’£÷Ä’∏÷Ç’©’µ’∏÷Ç’∂',
            '’ä’∏’¥’´’§’∏÷Ä - ’Ñ’∏’¶’°’´’Ø ’æ’´÷Ä’∏÷Ç’Ω',
            '’ä’∏’¥’´’§’∏÷Ä - ‘±’º’∏’≤’ª'
        ]
    }
}

# ==============================
# APP INITIALIZATION
# ==============================
if 'lang' not in st.session_state:
    st.session_state.lang = 'en'

# Load current language
lang = LANGUAGES[st.session_state.lang]

# ==============================
# MODEL FUNCTION
# ==============================
def model_prediction(test_image):
    model = tf.keras.models.load_model('trained_model.keras')
    image = tf.keras.preprocessing.image.load_img(test_image, target_size=(128,128))
    input_arr = tf.keras.preprocessing.image.img_to_array(image)
    input_arr = np.array([input_arr])
    prediction = model.predict(input_arr)
    return np.argmax(prediction)

# ==============================
# SIDEBAR
# ==============================
st.sidebar.title(lang['dashboard_title'])
st.session_state.lang = st.sidebar.radio(
    "‘º’•’¶’∏÷Ç / Language",
    ['en', 'am'],
    index=0 if st.session_state.lang == 'en' else 1
)
app_mode = st.sidebar.selectbox(lang['page_select'], lang['pages'])

# ==============================
# PAGE CONTENT
# ==============================
if app_mode == lang['pages'][0]:  # Home
    st.header(lang['home_title'])
    st.image('home_page.jpeg', use_column_width=True)
    st.markdown(lang['home_content'])

elif app_mode == lang['pages'][1]:  # About
    st.header(lang['about_title'])
    st.markdown(lang['about_content'])

elif app_mode == lang['pages'][2]:  # Prediction
    st.header(lang['prediction_title'])
    test_image = st.file_uploader(lang['file_uploader'])
    
    col1, col2 = st.columns(2)
    with col1:
        if st.button(lang['show_image_btn']):
            if test_image:
                st.image(test_image, use_column_width=True)
            else:
                st.warning(lang['upload_warning'])
    
    with col2:
        if st.button(lang['predict_btn']):
            if test_image:
                result_index = model_prediction(test_image)
                st.success(f"{lang['prediction_result'].format(lang['class_names'][result_index])}")
            else:
                st.warning(lang['upload_warning'])
